rule "Gas calc minute"
	when 
		Time cron "0 0/1 * * * ?"
	then
		val Number gcons = WB_GasCounter.deltaSince(now.minusMinutes(1))
		if (gcons !== null) Gas_Cons.postUpdate(gcons*60)
		else Gas_Cons.postUpdate(0)
end

rule "Gas calc"
	when 
		Time cron "0 0/15 * * * ?"
	then
		val Number gcons_today = WB_GasCounter.deltaSince(now.withTimeAtStartOfDay(),"rrd4j")
		val Number gcons_yest = ((WB_GasCounter.historicState(now.withTimeAtStartOfDay(),"rrd4j")).state as DecimalType).floatValue - ((WB_GasCounter.historicState(now.withTimeAtStartOfDay().minusDays(1),"rrd4j")).state as DecimalType).floatValue;
		val Number gcons_month = WB_GasCounter.deltaSince(now.withTimeAtStartOfDay().withDayOfMonth(1),"rrd4j")

		if (gcons_today !== null) Gas_ConsMN.postUpdate(gcons_today)
		if (gcons_yest !== null) Gas_ConsD.postUpdate(gcons_yest)
		if (gcons_month !== null) Gas_ConsM.postUpdate(gcons_month)

end

rule "Power calc"
	when 
		Time cron "0 0/5 * * * ?"
	then
val Number pcons = Power_Energy.deltaSince(now.minusDays(1))
if (pcons !== null) Power_Cons.postUpdate(pcons)
val Number pconsmn = Power_Energy.deltaSince(now.withTimeAtStartOfDay())
if (pconsmn !== null) Power_ConsMN.postUpdate(pconsmn)
val Number pconsm = Power_Energy.deltaSince(now.withTimeAtStartOfDay().withDayOfMonth(1))
if (pconsm !== null) Power_ConsM.postUpdate(pconsm)
end

rule "Send counters"
	when 
		Time cron "0 45 9 1 * ?"
	then
		val first = new DateTime(now.withTimeAtStartOfDay.withDayOfMonth(1));
		val second = new DateTime(now.withTimeAtStartOfDay.minusMonths(1).withDayOfMonth(1));
		val Number gcount = ((WB_GasCounter.historicState(first,"rrd4j")).state as DecimalType).floatValue;
		val Number g_old_count = ((WB_GasCounter.historicState(second,"rrd4j")).state as DecimalType).floatValue;
		val Number pcount = ((Power_Energy.historicState(first,"rrd4j")).state as DecimalType).floatValue;
		val Number p_old_count = ((Power_Energy.historicState(second,"rrd4j")).state as DecimalType).floatValue;

		var String message1 = "Показники лічильника газу\n\n";
		message1 += String::format("Показник станом на 01.%1$02d.%2$02d: %3$.2f m3\n", second.getMonthOfYear, second.getYear, (g_old_count));	
		message1 += String::format("Показник станом на 01.%1$02d.%2$02d: %3$.2f m3\n", first.getMonthOfYear, first.getYear, (gcount));	
		message1 += String::format("Спожито за місяць: %1$.2f m3", ((gcount-g_old_count)));	

		var String message2 = "Показники лічильника ел.енергії\n\n";
		message2 += String::format("Показник станом на 01.%1$02d.%2$02d: %3$.2f kWh\n", second.getMonthOfYear, second.getYear, p_old_count);	
		message2 += String::format("Показник станом на 01.%1$02d.%2$02d: %3$.2f kWh\n", first.getMonthOfYear, first.getYear, pcount);	
		message2 += String::format("Спожито за місяць: %1$.2f kWh", (pcount-p_old_count));	
		val mailActions = getActions("mail","mail:smtp:327b0d61")
		mailActions.sendMail("sv_h@ukr.net", "Показники лічильників", message1 + "\n\n\n" + message2);
		
end

// rule "get_8266_data"
// when
// 	Item TmpString changed
// then
// 	val newtemp = transform("REGEX", ".*?ppm:T(.*?)C:H.*", TmpString.state.toString)
// 	val newhum = transform("REGEX", ".*?C:H(.*?)%:d.*", TmpString.state.toString)
// 	val newco2 = transform("REGEX", ".*?C(.*?)ppm:T.*", TmpString.state.toString)

// 	if (newco2!==null) RoomCO2.postUpdate(newco2)
// 	if (newhum!==null) RoomHum.postUpdate(newhum)
// 	if (newtemp!==null) RoomTemp.postUpdate(newtemp)

// end

rule "get_8266_data222"
when
		Time cron "0 0/1 * * * ?"
then
  var String espinfo
  espinfo = executeCommandLine("/var/opt/getclim.sh",60000)
	val newtemp = transform("REGEX", ".*?ppm:T(.*?)C:H.*", espinfo)
	val newhum = transform("REGEX", ".*?C:H(.*?)%:d.*", espinfo)
	val newco2 = transform("REGEX", ".*?C(.*?)ppm:T.*", espinfo)

	if (newco2 !== null) RoomCO2.postUpdate(newco2)
	if (newhum !== null) RoomHum.postUpdate(newhum)
	if (newtemp !== null) RoomTemp.postUpdate(newtemp)
end