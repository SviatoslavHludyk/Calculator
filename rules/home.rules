rule "Gaz calc"
	when 
		Time cron "0 0/1 * * * ?"
	then

var Number gcons = WB_GazCounter.deltaSince(now.minusMinutes(1)) / 100
Gaz_Cons.postUpdate(gcons)
end

rule "GazD calc"
	when 
		Time cron "0 0 0 * * ?"
	then
var Number gdcons = WB_GazCounter.deltaSince(now.minusDays(1)) / 100
Gaz_ConsD.postUpdate(gdcons)
end

rule "GazMN calc"
	when 
		Time cron "0 0/1 * * * ?"
	then
var Number gmncons = WB_GazCounter.deltaSince(now.withTimeAtStartOfDay()) / 100
Gaz_ConsMN.postUpdate(gmncons)
end

rule "Power calc"
	when 
		Time cron "0 0 0 * * ?"
	then
var Number pcons = Power_Energy.deltaSince(now.minusDays(1))
Power_Cons.postUpdate(pcons)
end

rule "Power calcMN"
	when 
		Time cron "0 0/1 * * * ?"
	then
var Number pconsmn = Power_Energy.deltaSince(now.withTimeAtStartOfDay())
Power_ConsMN.postUpdate(pconsmn)
end



rule "Send counters"
	when 
		Time cron "0 30 09 1 * ?"
	then
		var Number gcount = WB_GazCounter.historicState(now.withTimeAtStartOfDay().withDayOfMonth(1)).state as DecimalType
		var Number g_old_count = WB_GazCounter.historicState(now.withTimeAtStartOfDay().minusMonths(1).withDayOfMonth(1)).state as DecimalType
		var Number pcount = Power_Energy.historicState(now.withTimeAtStartOfDay().withDayOfMonth(1)).state as DecimalType
		var Number p_old_count = Power_Energy.historicState(now.withTimeAtStartOfDay().minusMonths(1).withDayOfMonth(1)).state as DecimalType

		var String message = "Показники лічильника газу\n\n" + "Показник станом на 01." + now.minusMonths(1).getMonthOfYear.toString() + "." + now.getYear.toString() + ": " + String::format("%.2f", g_old_count.floatValue()) + " m3\n" +	
		"Показник станом на 01." + now.getMonthOfYear.toString() + "." + now.getYear.toString() + ": " + String::format("%.2f", gcount.floatValue()) + " m3\n" +			
		"Спожито за місяць: " + String::format("%.2f", (gcount-g_old_count).floatValue()) + " m3\n\n\n" + 
		"Показники лічильника ел.енергії\n\n" + "Показник станом на 01." + now.minusMonths(1).getMonthOfYear.toString() + "." + now.getYear.toString() + ": " + String::format("%.2f", (p_old_count/1000).floatValue()) + " kWh\n" +	
		"Показник станом на 01." + now.getMonthOfYear.toString() + "." + now.getYear.toString() + ": " + String::format("%.2f", (pcount/1000).floatValue()) + " kWh\n" +			
		"Спожито за місяць: " + String::format("%.2f", ((pcount-p_old_count)/1000).floatValue()) + " kWh\n"
		sendMail("sv_h@ukr.net", "Показники лічильників", message)
		
end

rule "get_8266_data"
when
	Item TmpString changed
then
	val newtemp = transform("REGEX", ".*?ppm:T(.*?)C:H.*", TmpString.state.toString)
	val newhum = transform("REGEX", ".*?C:H(.*?)%:d.*", TmpString.state.toString)
	val newco2 = transform("REGEX", ".*?C(.*?)ppm:T.*", TmpString.state.toString)

	RoomCO2.postUpdate(newco2)
	RoomHum.postUpdate(newhum)
	RoomTemp.postUpdate(newtemp)

end
