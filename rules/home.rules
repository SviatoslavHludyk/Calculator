rule "Gas calc"
	when 
		Time cron "0 0/1 * * * ?"
	then

val Number gcons = WB_GasCounter.deltaSince(now.minusMinutes(1)) / 100
Gas_Cons.postUpdate(gcons)
end

rule "GasD calc"
	when 
		Time cron "0 0 0 * * ?"
	then
val Number gdcons = WB_GasCounter.deltaSince(now.minusDays(1)) / 100
Gas_ConsD.postUpdate(gdcons)
end

rule "GasMN calc"
	when 
		Time cron "0 0/1 * * * ?"
	then
val Number gmncons = WB_GasCounter.deltaSince(now.withTimeAtStartOfDay()) / 100
Gas_ConsMN.postUpdate(gmncons)
end

rule "Power calc"
	when 
		Time cron "0 0 0 * * ?"
	then
val Number pcons = Power_Energy.deltaSince(now.minusDays(1))
Power_Cons.postUpdate(pcons)
end

rule "Power calcMN"
	when 
		Time cron "0 0/1 * * * ?"
	then
val Number pconsmn = Power_Energy.deltaSince(now.withTimeAtStartOfDay())
Power_ConsMN.postUpdate(pconsmn)
end

rule "Send counters"
	when 
		Time cron "0 15 9 1 * ?"
	then
		val first = new DateTime(now.withTimeAtStartOfDay.withDayOfMonth(1));
		val second = new DateTime(now.withTimeAtStartOfDay.minusMonths(1).withDayOfMonth(1));
		val Number gcount = ((WB_GasCounter.historicState(first,"rrd4j")).state as DecimalType).floatValue;
		val Number g_old_count = ((WB_GasCounter.historicState(second,"rrd4j")).state as DecimalType).floatValue;
		val Number pcount = ((Power_Energy.historicState(first,"rrd4j")).state as DecimalType).floatValue;
		val Number p_old_count = ((Power_Energy.historicState(second,"rrd4j")).state as DecimalType).floatValue;

		var String message1 = "Показники лічильника газу\n\n";
		message1 += String::format("Показник станом на 01.%1$02d.%2$02d: %3$.2f m3\n", second.getMonthOfYear, second.getYear, (g_old_count/100));	
		message1 += String::format("Показник станом на 01.%1$02d.%2$02d: %3$.2f m3\n", first.getMonthOfYear, first.getYear, (gcount/100));	
		message1 += String::format("Спожито за місяць: %1$.2f m3", ((gcount-g_old_count)/100));	

		var String message2 = "Показники лічильника ел.енергії\n\n";
		message2 += String::format("Показник станом на 01.%1$02d.%2$02d: %3$.2f kWh\n", second.getMonthOfYear, second.getYear, p_old_count);	
		message2 += String::format("Показник станом на 01.%1$02d.%2$02d: %3$.2f kWh\n", first.getMonthOfYear, first.getYear, pcount);	
		message2 += String::format("Спожито за місяць: %1$.2f kWh", (pcount-p_old_count));	
		val mailActions = getActions("mail","mail:smtp:327b0d61")
		mailActions.sendMail("sv_h@ukr.net", "Показники лічильників", message1 + "\n\n\n" + message2);
		
end

rule "get_8266_data"
when
	Item TmpString changed
then
	val newtemp = transform("REGEX", ".*?ppm:T(.*?)C:H.*", TmpString.state.toString)
	val newhum = transform("REGEX", ".*?C:H(.*?)%:d.*", TmpString.state.toString)
	val newco2 = transform("REGEX", ".*?C(.*?)ppm:T.*", TmpString.state.toString)

	RoomCO2.postUpdate(newco2)
	RoomHum.postUpdate(newhum)
	RoomTemp.postUpdate(newtemp)
	// WB_RoomCO2.postUpdate(newco2)
	sendCommand(WB_RoomCO2, newco2)
	sendCommand(WB_RoomHum, newhum)

end


// rule "Publish item changes"
// when
// Item RoomCO2 changed
// then
// WB_RoomCO2.postUpdate(RoomCO2.state.toString)
// val actions = getActions("mqtt","mqtt:broker:8f67b874")
// actions.publishMQTT("devices/ventilation_switcher/controls/CO2/on", "800")
// logInfo("log", "publish:  mqtt:topic:cf2b98f3:WBCO2 ")

// end